---
description:
globs:
alwaysApply: true
---
# 通用规范
- 中文回答我的提问
- 代码进行注释


# 目录与模块结构
- 前后端均采用分层+分模块结构，目录清晰，便于扩展和维护。
- 每个业务模块（如 Project、Editor、AI、Docs）有独立目录，包含 UI 组件、业务 hooks、接口定义等。
- 全局状态（store）统一放在 stores/，只做状态管理，不写副作用。
- hooks 只放在 hooks/ 或各模块目录下，负责副作用和业务逻辑。
- 严格按照文档目录结构进行开发，保持目录清晰简洁

# 代码风格与命名
- 统一使用 TypeScript，类型定义完整，接口参数、返回值均需类型注解。
- 变量、函数、文件、目录命名采用小驼峰（camelCase），组件/类名用大驼峰（PascalCase）。
- 文件命名与导出内容一致，避免歧义。
- 组件、hooks、store、服务等均需注释说明用途和参数。
- 代码遵循简洁、易读，优雅，清晰，避免内存泄露等问题存在
- 严格遵守TypeScript规范进行开发，避免TS报错

# 状态管理
- 只将“全局/跨页面共享”的状态放入 zustand store，局部状态用 useState。
- store 只负责 set/get 状态，不写 API 请求、Socket 事件等副作用。
- 每个业务模块下有自己的 hooks（如 useProject.ts），负责接口请求、Socket 事件、业务逻辑，并与 store 交互。
- 组件只调用 hooks，不直接操作 store。

# 接口与服务
- 封装request，避免重复的请求拦截器
- API 请求统一封装在 services/并且使用封装好的request，便于 mock、测试和维护。
- 接口参数、响应、错误码等严格遵循产品需求文档定义。
- 所有接口调用需处理异常，给出用户友好提示。

# 样式与 UI
- 所有自定义样式、全局样式、模块样式均采用 Sass（.scss），Antd 组件样式无需改动。
- 组件样式分模块管理，避免全局污染。
- Antd 主题定制统一通过 ConfigProvider 或 token 实现。
- UI不做业务实现，统一从对应模块的hooks进行调用，保持代码纯净，简洁
- 抽离组件封装公共组件，UI多使用公共组件，保持代码简洁

# Socket 实时协作
Socket 连接、事件监听、断线重连等统一在 hooks 中管理（如 useSocket）。
所有 Socket 事件需带 token，后端校验权限。
协作相关状态（如光标、协作者列表）放在 store，UI 组件通过 hooks 订阅。

#  权限与安全
前端所有页面、操作均需根据用户角色（只读/编辑/管理员）做权限判断，后端二次校验。
敏感操作（如删除、回滚、权限变更）需二次确认。
Token、refresh token 管理严格遵循安全最佳实践（httpOnly cookie、自动续签等）

# 文档与注释
关键业务流程、接口、store、hooks、Socket 事件等需有详细注释。
每个模块需有 README 或注释说明用途、接口、依赖关系。
重要设计决策、约定需同步到团队文档。

# bug、报错问题处理规范
- bug、报错问题处理首先要联系上下文，找到问题根源进行处理，不能影响其他模块功能，如果上下文都有报错，或者代码问题应该一并解决

# . 质量与测试
重要业务逻辑、接口、store、hooks 需有单元测试或集成测试。
前端页面、交互需自测，保证主流浏览器兼容性。
后端接口需保证安全、性能、异常处理健全。
保持代码健壮
